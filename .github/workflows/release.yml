name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # - runner: ubuntu-latest
          #   target: aarch64_unknown_linux_gnu
          - runner: macos-latest
            target: aarch64-apple-darwin
          - runner: macos-latest
            target: x86_64-apple-darwin
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: cargo-bins/cargo-binstall@main

      - name: Set up Environment
        shell: bash
        run: rustup target add ${{ matrix.platform.target }}
      - name: Set up Windows Environment
        shell: bash
        run: |
          git config --global core.longpaths true
          cargo install --target-dir=target -v cargo-vcpkg
          cargo vcpkg -v build
        if: runner.os == 'Windows'
      - name: Set up MacOS Environment
        run: brew install autoconf automake libtool
        if: runner.os == 'macOS'

      - name: Build git-remote-codecommit
        run: cargo build --release --target=${{ matrix.platform.target }} --verbose 

      - name: Rename Binary
        run: cp target/${{ matrix.platform.target }}/release/git-remote-codecommit target/git-remote-codecommit-${{ runner.os }}-${{ matrix.platform.target }}
        if: runner.os != 'Windows'
      - name: Rename Binary
        run: cp target/${{ matrix.platform.target }}/release/git-remote-codecommit.exe target/git-remote-codecommit-${{ runner.os }}-${{ matrix.platform.target }}.exe
        if: runner.os == 'Windows'

      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-remote-codecommit-${{ runner.os }}-${{ matrix.platform.target }}
          path: target/git-remote-codecommit-${{ runner.os }}-${{ matrix.platform.target }}*

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Binary Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin
          pattern: git-remote-codecommit-*
          merge-multiple: true

      - name: List Binaries
        run: |
          ls -lah bin/
          file bin/*
          
      - name: Authenticate gh CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          run: ${{ github.run_number }}
          sha: ${{ github.sha }}
        run: |
          today=$(date '+%Y-%m-%d')
          gh release create "$today-$tag-$run" \
              --repo="$GITHUB_REPOSITORY" \
              --title="git-remote-codecommit Release $today-$tag #$run" \
              --target="$sha" \
              --generate-notes \
              bin/git-remote-codecommit-*