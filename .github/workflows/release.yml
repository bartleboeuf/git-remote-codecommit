name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.get_version.outputs.VERSION }}',
              name: 'Release ${{ steps.get_version.outputs.VERSION }}',
              body: 'Release ${{ steps.get_version.outputs.VERSION }}',
              draft: false,
              prerelease: false
            });
            return data.id

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: git-remote-codecommit
            asset_name: git-remote-codecommit-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: git-remote-codecommit
            asset_name: git-remote-codecommit-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: git-remote-codecommit.exe
            asset_name: git-remote-codecommit-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: git-remote-codecommit
            asset_name: git-remote-codecommit-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: git-remote-codecommit
            asset_name: git-remote-codecommit-macos-aarch64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
      
      - name: Create archive (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
      
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
      
      - name: Upload Release Asset (Linux and macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              name: '${{ matrix.asset_name }}.tar.gz',
              data: fs.readFileSync('${{ matrix.asset_name }}.tar.gz')
            });
      
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              name: '${{ matrix.asset_name }}.zip',
              data: fs.readFileSync('${{ matrix.asset_name }}.zip')
            });
