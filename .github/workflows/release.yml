name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
            ext: .exe
          # - target: aarch64-pc-windows-msvc
          #   os: windows-latest
          #   name: windows-aarch64
          #   ext: .exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Get binary name
        id: binary_name
        shell: bash
        run: |
          # Extract binary name from Cargo.toml
          # BINARY_NAME=$(grep -E '^name\s*=' Cargo.toml | head -1 | sed -E 's/^name\s*=\s*"(.*)"$/\1/')
          BINARY_NAME="git-remote-codecommit"
          echo "binary_name=${BINARY_NAME}" >> $GITHUB_OUTPUT

      - name: Create archive
        id: archive
        shell: bash
        run: |
          BINARY_NAME="${{ steps.binary_name.outputs.binary_name }}"
          echo "BINARY_NAME=${BINARY_NAME}"
          BINARY_PATH="target/${{ matrix.target }}/release/${BINARY_NAME}${{ matrix.ext }}"
          echo "BINARY_PATH=${BINARY_PATH}"
          ARCHIVE_NAME="${BINARY_NAME}-${{ github.ref_name }}-${{ matrix.name }}"
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Creating Windows archive"
            ARCHIVE_FILE="${ARCHIVE_NAME}.zip"
            echo "Creating archive: ${ARCHIVE_FILE}"
            cd target/${{ matrix.target }}/release
            7z a "../../../${ARCHIVE_FILE}" "${BINARY_NAME}${{ matrix.ext }}"
          else
            ls -ail target/${{ matrix.target }}/release
            echo "Creating non-Windows archive"
            ARCHIVE_FILE="${ARCHIVE_NAME}.tar.gz"
            echo "Creating archive: ${ARCHIVE_FILE}"
            tar -czf "${ARCHIVE_FILE}" -C "target/${{ matrix.target }}/release" "${BINARY_NAME}${{ matrix.ext }}"
          fi
          
          echo "archive_name=${ARCHIVE_FILE}" >> $GITHUB_OUTPUT
          echo "asset_path=${ARCHIVE_FILE}" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.archive.outputs.asset_path }}
          asset_name: ${{ steps.archive.outputs.archive_name }}
          asset_content_type: application/octet-stream

  generate-checksums:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate checksums
        run: |
          # Get all release assets
          ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.assets[].browser_download_url')
          
          # Download and create checksums
          for asset in $ASSETS; do
            filename=$(basename "$asset")
            curl -L -o "$filename" "$asset"
            sha256sum "$filename" >> checksums.txt
          done

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain